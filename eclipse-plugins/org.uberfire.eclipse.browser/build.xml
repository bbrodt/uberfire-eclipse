<project name="uberfire-eclipse" default="rebuild-classpath-files">
	<property name="mvn.out" value="mvn.out"/>
	<property name="mvn.err" value="mvn.err"/>
	<property name="mvn.classpath" value="mvn.classpath"/>

	<property name="new.classpath" value="new.classpath"/>
	<property name="temp.classpath" value="temp.classpath"/>
	<property name="new.manifest" value="new.manifest"/>
	<property name="temp.manifest" value="temp.manifest"/>
	
<!-- for debugging
	<property name="keep.temp.files" value="true"/>
-->
	
	<target name="rebuild-classpath-files">
		<antcall target="clean-classpath"/>
		<antcall target="copy-dependencies"/>
		<antcall target="build-classpath"/>
		<antcall target="delete-temp-files"/>
	</target>

	<target name="clean-classpath">
		<!-- remove all of the old dependencies from .classpath and MANIFEST.MF -->
		<copy tofile="${new.classpath}" file=".classpath" overwrite="true" force="true">
			<filterchain>
				<linecontains negate="true">
					<contains value='classpathentry kind="lib" path="lib/'/>
				</linecontains>
			</filterchain>
			<filterchain>
				<linecontains negate="true">
					<contains value="/classpath"/>
				</linecontains>
			</filterchain>
		</copy>
		<concat destfile="${new.classpath}" append="true">&lt;/classpath&gt;</concat>
		<!-- replace the current .classpath file -->
		<move file="${new.classpath}" tofile=".classpath" overwrite="true" force="true"/>

		<copy tofile="${new.manifest}" file="META-INF/MANIFEST.MF" overwrite="true" force="true">
			<filterchain>
				<linecontainsregexp negate="true">
					<regexp pattern='^ lib/.*jar'/>
				</linecontainsregexp>
				<linecontainsregexp negate="true">
					<regexp pattern='Bundle-ClassPath:'/>
				</linecontainsregexp>
			</filterchain>
		</copy>
		<!-- replace the current MANIFEST.MF file -->
		<move file="${new.manifest}" tofile="META-INF/MANIFEST.MF" overwrite="true" force="true"/>
	</target>
	
	<target name="copy-dependencies">
		<!-- first clean out the "lib" directory -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="lib" includes="**/*"/>
		</delete>

		<!-- make sure maven completes before we start processing the "lib" directory listing -->
		<sequential>
			<!-- invoke maven to copy depenencies to our "lib" directory -->
			<exec executable="sh" output="${mvn.out}" failonerror="true" error="${mvn.err}">
				<arg value="mvn"/>
				<arg value="dependency:copy-dependencies"/>
				<arg value="-DoutputDirectory=lib"/>
			</exec>
			
			<!-- copy the list of files to a temp file, used to build the classpath -->
			<fileset id="lib.contents" dir="lib" includes="*"/> 
			<property name="prop.lib.contents" refid="lib.contents"/>
			<echo file="${mvn.classpath}">${prop.lib.contents}</echo>
			<replaceregexp file="${mvn.classpath}" match=";" replace="${line.separator}" flags="g"/>
			<replaceregexp file="${mvn.classpath}" match="^" replace='lib/' byline="true"/>
		</sequential>
		<!-- we should now have a file containing a list of jar names, one per line, prefixed with "lib/" -->
	</target>

	<target name="build-classpath">
		<!-- build the new .classpath file: -->
		<!-- copy .classpath to a new file removing the closing </classpath> tag -->
		<!-- this will become the new .classpath file if the build succeeds -->
		<copy tofile="${new.classpath}" file=".classpath" overwrite="true" force="true">
			<filterchain>
				<linecontains negate="true">
					<contains value="/classpath"/>
				</linecontains>
			</filterchain>
		</copy>
		<!-- create a copy of maven classpath file in a temp file --> 
		<copy tofile="${temp.classpath}" file="${mvn.classpath}" overwrite="true" force="true"/>
		<!-- prefix each line with a <classpathentry> tag and attributes -->
		<replaceregexp file="${temp.classpath}" match="(.*jar)" replace='&#09;&lt;classpathentry kind="lib" path="\1"/&gt;' byline="true"/>
		<!-- append the result to temp classpath file -->
		<concat destfile="${new.classpath}" append="true">
			<filelist files="${temp.classpath}"/>
		</concat>
		<!-- finally append the closing </classpath> tag -->
		<concat destfile="${new.classpath}" append="true">${line.separator}&lt;/classpath&gt;</concat>

		<!-- build the new MANIFEST.MF file: -->
		<!-- make a temp copy -->
		<!-- this will become the new MANIFEST.MF if the build succeeds-->
		<copy tofile="${new.manifest}" file="META-INF/MANIFEST.MF" overwrite="true" force="true"/>
		<!-- create another copy of maven classpath in a temp file --> 
		<copy tofile="${temp.manifest}" file="${mvn.classpath}" overwrite="true" force="true"/>
		<!-- replace the path separators with commas and newlines in temp file --> 
		<replaceregexp file="${temp.manifest}" match=";" replace=',${line.separator}' flags="g"/>
		<!-- insert a single space before each line, as required by the MANIFEST.MF -->
		<replaceregexp file="${temp.manifest}" match="^" replace=' ' byline="true"/>
		<!-- append a Bundle-Classpath directive to temp file -->
		<echo file="${new.manifest}" append="true">Bundle-ClassPath: target/classes,${line.separator}</echo>
		<concat destfile="${new.manifest}" append="true">
			<filelist files="${temp.manifest}"/>
		</concat>

		<!-- replace the .classpath and MANIFEST.MF files with their new versions -->
		<move file="${new.classpath}" tofile=".classpath" overwrite="true" force="true"/>
		
		<echo file="${new.manifest}" append="true">${line.separator}</echo>
		<move file="${new.manifest}" tofile="META-INF/MANIFEST.MF" overwrite="true" force="true"/>

		<loadfile property="classpath.contents" srcFile=".classpath"/> 
		<echo>new classpath:</echo>
		<echo>${classpath.contents}</echo> 
	</target>
	
	<target name="delete-temp-files" unless="keep.temp.files">
		<!-- delete temp files -->
		<delete file="${mvn.out}" failonerror="false"/>
		<delete file="${mvn.err}" failonerror="false"/>
		<delete file="${mvn.classpath}" failonerror="false"/>
		<delete file="${temp.classpath}" failonerror="false"/>
		<delete file="${temp.manifest}" failonerror="false"/>
	</target>
</project>
